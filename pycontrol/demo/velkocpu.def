#bits 8
#ruledef
{
    nop  () => 0x00
    ldi  (A, {value1}) => 0x01 @ value1`8
    ldi  (B, {value1}) => 0x02 @ value1`8
    ldi  (C, {value1}) => 0x03 @ value1`8
    ldi  (D, {value1}) => 0x04 @ value1`8
    ldi_F  ({value0}) => 0x05 @ value0`8
    lea  (DP, {address1}) => 0x06 @ address1[15:8] @ address1[7:0]
    add  (A, A) => 0x07
    add  (A, B) => 0x08
    add  (A, C) => 0x09
    add  (A, D) => 0x0a
    add  (B, A) => 0x0b
    add  (B, B) => 0x0c
    add  (B, C) => 0x0d
    add  (B, D) => 0x0e
    add  (C, A) => 0x0f
    add  (C, B) => 0x10
    add  (C, C) => 0x11
    add  (C, D) => 0x12
    add  (D, A) => 0x13
    add  (D, B) => 0x14
    add  (D, C) => 0x15
    add  (D, D) => 0x16
    adc  (A, A) => 0x17
    adc  (A, B) => 0x18
    adc  (A, C) => 0x19
    adc  (A, D) => 0x1a
    adc  (B, A) => 0x1b
    adc  (B, B) => 0x1c
    adc  (B, C) => 0x1d
    adc  (B, D) => 0x1e
    adc  (C, A) => 0x1f
    adc  (C, B) => 0x20
    adc  (C, C) => 0x21
    adc  (C, D) => 0x22
    adc  (D, A) => 0x23
    adc  (D, B) => 0x24
    adc  (D, C) => 0x25
    adc  (D, D) => 0x26
    sub  (A, B) => 0x27
    sub  (A, C) => 0x28
    sub  (A, D) => 0x29
    sub  (B, A) => 0x2a
    sub  (B, C) => 0x2b
    sub  (B, D) => 0x2c
    sub  (C, A) => 0x2d
    sub  (C, B) => 0x2e
    sub  (C, D) => 0x2f
    sub  (D, A) => 0x30
    sub  (D, B) => 0x31
    sub  (D, C) => 0x32
    sbb  (A, B) => 0x33
    sbb  (A, C) => 0x34
    sbb  (A, D) => 0x35
    sbb  (B, A) => 0x36
    sbb  (B, C) => 0x37
    sbb  (B, D) => 0x38
    sbb  (C, A) => 0x39
    sbb  (C, B) => 0x3a
    sbb  (C, D) => 0x3b
    sbb  (D, A) => 0x3c
    sbb  (D, B) => 0x3d
    sbb  (D, C) => 0x3e
    and  (A, B) => 0x3f
    and  (A, C) => 0x40
    and  (A, D) => 0x41
    and  (B, A) => 0x42
    and  (B, C) => 0x43
    and  (B, D) => 0x44
    and  (C, A) => 0x45
    and  (C, B) => 0x46
    and  (C, D) => 0x47
    and  (D, A) => 0x48
    and  (D, B) => 0x49
    and  (D, C) => 0x4a
    or  (A, B) => 0x4b
    or  (A, C) => 0x4c
    or  (A, D) => 0x4d
    or  (B, A) => 0x4e
    or  (B, C) => 0x4f
    or  (B, D) => 0x50
    or  (C, A) => 0x51
    or  (C, B) => 0x52
    or  (C, D) => 0x53
    or  (D, A) => 0x54
    or  (D, B) => 0x55
    or  (D, C) => 0x56
    xor  (A, B) => 0x57
    xor  (A, C) => 0x58
    xor  (A, D) => 0x59
    xor  (B, A) => 0x5a
    xor  (B, C) => 0x5b
    xor  (B, D) => 0x5c
    xor  (C, A) => 0x5d
    xor  (C, B) => 0x5e
    xor  (C, D) => 0x5f
    xor  (D, A) => 0x60
    xor  (D, B) => 0x61
    xor  (D, C) => 0x62
    not  (A) => 0x63
    not  (B) => 0x64
    not  (C) => 0x65
    not  (D) => 0x66
    inc  (A) => 0x67
    inc  (B) => 0x68
    inc  (C) => 0x69
    inc  (D) => 0x6a
    dec  (A) => 0x6b
    dec  (B) => 0x6c
    dec  (C) => 0x6d
    dec  (D) => 0x6e
    shr  (A) => 0x6f
    shr  (B) => 0x70
    shr  (C) => 0x71
    shr  (D) => 0x72
    ror  (A) => 0x73
    ror  (B) => 0x74
    ror  (C) => 0x75
    ror  (D) => 0x76
    asr  (A) => 0x77
    asr  (B) => 0x78
    asr  (C) => 0x79
    asr  (D) => 0x7a
    swap  (A) => 0x7b
    swap  (B) => 0x7c
    swap  (C) => 0x7d
    swap  (D) => 0x7e
    cmp  (A, B) => 0x7f
    cmp  (A, C) => 0x80
    cmp  (A, D) => 0x81
    cmp  (B, A) => 0x82
    cmp  (B, C) => 0x83
    cmp  (B, D) => 0x84
    cmp  (C, A) => 0x85
    cmp  (C, B) => 0x86
    cmp  (C, D) => 0x87
    cmp  (D, A) => 0x88
    cmp  (D, B) => 0x89
    cmp  (D, C) => 0x8a
    mov  (A, B) => 0x8b
    mov  (A, C) => 0x8c
    mov  (A, D) => 0x8d
    mov  (B, A) => 0x8e
    mov  (B, C) => 0x8f
    mov  (B, D) => 0x90
    mov  (C, A) => 0x91
    mov  (C, B) => 0x92
    mov  (C, D) => 0x93
    mov  (D, A) => 0x94
    mov  (D, B) => 0x95
    mov  (D, C) => 0x96
    out  (A) => 0x97
    out  (B) => 0x98
    out  (C) => 0x99
    out  (D) => 0x9a
    cout  (A) => 0x9b
    cout  (B) => 0x9c
    cout  (C) => 0x9d
    cout  (D) => 0x9e
    st  ({address0}, A) => 0x9f @ address0[15:8] @ address0[7:0]
    st  ({address0}, B) => 0xa0 @ address0[15:8] @ address0[7:0]
    st  ({address0}, C) => 0xa1 @ address0[15:8] @ address0[7:0]
    st  ({address0}, D) => 0xa2 @ address0[15:8] @ address0[7:0]
    stx  ({address0}, A, A) => 0xa3 @ address0[15:8] @ address0[7:0]
    stx  ({address0}, A, B) => 0xa4 @ address0[15:8] @ address0[7:0]
    stx  ({address0}, A, C) => 0xa5 @ address0[15:8] @ address0[7:0]
    stx  ({address0}, A, D) => 0xa6 @ address0[15:8] @ address0[7:0]
    stx  ({address0}, B, A) => 0xa7 @ address0[15:8] @ address0[7:0]
    stx  ({address0}, B, B) => 0xa8 @ address0[15:8] @ address0[7:0]
    stx  ({address0}, B, C) => 0xa9 @ address0[15:8] @ address0[7:0]
    stx  ({address0}, B, D) => 0xaa @ address0[15:8] @ address0[7:0]
    stx  ({address0}, C, A) => 0xab @ address0[15:8] @ address0[7:0]
    stx  ({address0}, C, B) => 0xac @ address0[15:8] @ address0[7:0]
    stx  ({address0}, C, C) => 0xad @ address0[15:8] @ address0[7:0]
    stx  ({address0}, C, D) => 0xae @ address0[15:8] @ address0[7:0]
    stx  ({address0}, D, A) => 0xaf @ address0[15:8] @ address0[7:0]
    stx  ({address0}, D, B) => 0xb0 @ address0[15:8] @ address0[7:0]
    stx  ({address0}, D, C) => 0xb1 @ address0[15:8] @ address0[7:0]
    stx  ({address0}, D, D) => 0xb2 @ address0[15:8] @ address0[7:0]
    ld  (A, {address1}) => 0xb3 @ address1[15:8] @ address1[7:0]
    ld  (B, {address1}) => 0xb4 @ address1[15:8] @ address1[7:0]
    ld  (C, {address1}) => 0xb5 @ address1[15:8] @ address1[7:0]
    ld  (D, {address1}) => 0xb6 @ address1[15:8] @ address1[7:0]
    ldx  (A, {address1}, A) => 0xb7 @ address1[15:8] @ address1[7:0]
    ldx  (A, {address1}, B) => 0xb8 @ address1[15:8] @ address1[7:0]
    ldx  (A, {address1}, C) => 0xb9 @ address1[15:8] @ address1[7:0]
    ldx  (A, {address1}, D) => 0xba @ address1[15:8] @ address1[7:0]
    ldx  (B, {address1}, A) => 0xbb @ address1[15:8] @ address1[7:0]
    ldx  (B, {address1}, B) => 0xbc @ address1[15:8] @ address1[7:0]
    ldx  (B, {address1}, C) => 0xbd @ address1[15:8] @ address1[7:0]
    ldx  (B, {address1}, D) => 0xbe @ address1[15:8] @ address1[7:0]
    ldx  (C, {address1}, A) => 0xbf @ address1[15:8] @ address1[7:0]
    ldx  (C, {address1}, B) => 0xc0 @ address1[15:8] @ address1[7:0]
    ldx  (C, {address1}, C) => 0xc1 @ address1[15:8] @ address1[7:0]
    ldx  (C, {address1}, D) => 0xc2 @ address1[15:8] @ address1[7:0]
    ldx  (D, {address1}, A) => 0xc3 @ address1[15:8] @ address1[7:0]
    ldx  (D, {address1}, B) => 0xc4 @ address1[15:8] @ address1[7:0]
    ldx  (D, {address1}, C) => 0xc5 @ address1[15:8] @ address1[7:0]
    ldx  (D, {address1}, D) => 0xc6 @ address1[15:8] @ address1[7:0]
    tstx  ({address0}, A) => 0xc7 @ address0[15:8] @ address0[7:0]
    tstx  ({address0}, B) => 0xc8 @ address0[15:8] @ address0[7:0]
    tstx  ({address0}, C) => 0xc9 @ address0[15:8] @ address0[7:0]
    tstx  ({address0}, D) => 0xca @ address0[15:8] @ address0[7:0]
    jmp  ({address0}) => 0xcb @ address0[15:8] @ address0[7:0]
    beq  ({address0}) => 0xcc @ address0[15:8] @ address0[7:0]
    bne  ({address0}) => 0xcd @ address0[15:8] @ address0[7:0]
    bcs  ({address0}) => 0xce @ address0[15:8] @ address0[7:0]
    bcc  ({address0}) => 0xcf @ address0[15:8] @ address0[7:0]
    push  (A) => 0xd0
    push  (B) => 0xd1
    push  (C) => 0xd2
    push  (D) => 0xd3
    push_F  () => 0xd4
    push  (LR) => 0xd5
    pop  (A) => 0xd6
    pop  (B) => 0xd7
    pop  (C) => 0xd8
    pop  (D) => 0xd9
    pop_F  () => 0xda
    pop  (LR) => 0xdb
    call  ({address0}) => 0xdc @ address0[15:8] @ address0[7:0]
    ret  () => 0xdd
    brk  () => 0xde
    hlt  () => 0xdf
}
